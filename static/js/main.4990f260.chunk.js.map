{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","memo","title","Title","Plot","description","imgUrl","Poster","imdbID","className","src","alt","href","propTypes","PropTypes","string","isRequired","MoviesList","movies","map","movie","key","imdbId","BASE_URL","loadMovie","a","fetch","response","ok","Error","status","json","result","FindMovie","addMovie","useState","setMovie","setTitle","titleError","setTitleError","visibleCard","setVisibleCard","findMovie","newMovie","Response","htmlFor","type","id","placeholder","classNames","value","onChange","event","target","onKeyPress","preventDefault","onClick","disabled","App","setMovies","length","some","moviesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4990f260.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = memo(({\n  Title: title,\n  Plot: description = '',\n  Poster: imgUrl,\n  imdbID,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={`https://www.imdb.com/title/${imdbID}/`}>IMDB</a>\n      </div>\n    </div>\n  </div>\n));\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Plot: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=fc4dff85';\n\nexport async function loadMovie(title) {\n  const response = await fetch(`${BASE_URL}&t=[${title}]`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}`);\n  }\n\n  const result = await response.json();\n\n  return result;\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { loadMovie } from '../../api/api';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [movie, setMovie] = useState({});\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [visibleCard, setVisibleCard] = useState(false);\n\n  const findMovie = async() => {\n    try {\n      const newMovie = await loadMovie(title);\n\n      if (newMovie.Response === 'False') {\n        setTitleError(true);\n\n        return;\n      }\n\n      setMovie(newMovie);\n      setVisibleCard(true);\n      setTitle('');\n    } catch (error) {\n      setTitleError(true);\n    }\n  };\n\n  const handleChange = (event) => {\n    setTitleError(false);\n    setTitle(event.target.value);\n  };\n\n  const handleReset = () => {\n    setTitle('');\n    setVisibleCard(false);\n    setMovie({});\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={\n                classNames('input', { 'is-danger': titleError })\n              }\n              value={title}\n              onChange={handleChange}\n              onKeyPress={(event) => {\n                if (event.key === 'Enter') {\n                  event.preventDefault();\n                  findMovie();\n                }\n              }}\n            />\n          </div>\n\n          {titleError && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              disabled={!visibleCard}\n              onClick={() => {\n                addMovie(movie);\n                handleReset();\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {visibleCard && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...movie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([]);\n\n  const addMovie = (newMovie) => {\n    const hasMovie = movies\n      .some(movie => newMovie.imdbID === movie.imdbID);\n\n    if (hasMovie) {\n      return;\n    }\n\n    setMovies(moviesList => [...moviesList, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        {movies.length\n          ? <MoviesList movies={movies} />\n          : (\n            <h2>\n              Add your movies\n            </h2>\n          )\n        }\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}